#ifndef DISCDIRECTMASKS_H
#define DISCDIRECTMASKS_H

#include <map>
#include <vector>
#include <QPoint>

/**
 * @brief The DiscDirectMasks class calculates the masks which help in the calculation at the local gradient
 * Given a point, the points surrounding this center point within a given radius are considered.
 * There 8 45° arcs surrounding the center point. Along the 45° directions one can generate 4 pairs of half
 * discs. The points in a sector are generated by the function getArcPoints and the points in the half
 * discs are generated by the function getHalfDiscPoints. How many points are there in every sector is also
 * computed and the values can be retrieved with the function getCounters. Two neighboring sectors are
 * overlapping. The boundary which is consider to belong to each sector is save in the m_BorderPoints
 * multimap.
 */

class DiscDirectMasks
{
public:
    DiscDirectMasks(int radius = 3);

    /**
     * @brief getArcPoints - For each 45° arc it returns the points in the arc sector
     * Only one boundary of the arc is considered to be contained in the sector
     * @param arcId - id of arc
     * @return - vector of points
     */
    std::vector<QPoint> getArcPoints(int arcId);
    /**
     * @brief getHalfDiscPoints - computes the points found in the 4  45° sectors
     * following the second with the id halfDiscId
     * @param halfDiscId - id (one of eight 45° sectors)
     * @return
     */
    std::vector<QPoint> getHalfDiscPoints(int halfDiscId);
    inline std::vector<int> getCounters() { return m_Counters; }


private:
    /*
     * Generate the points in each of the 8 45° sectors
     **/
    void generateArcs();
    /*
     * Generate the points considered on the borders of the sector
     **/
    void generateBorders();

private:
    int m_Radius = 3;
    //pairs contain index of the subdisk(sector) containing the point and the point itself
    std::multimap<int, QPoint> m_MaskPoints;
    //for every sector save the points considered on the its border
    std::multimap<int, QPoint> m_BorderPoints;
    //how many points are in every sector (see getArcPoints)
    std::vector<int> m_Counters;
};

#endif // DISCDIRECTMASKS_H
